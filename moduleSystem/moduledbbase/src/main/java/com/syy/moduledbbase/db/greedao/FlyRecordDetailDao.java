package com.syy.moduledbbase.db.greedao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.syy.moduledbbase.db.entity.modulecommon.FlyRecordDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FLY_RECORD_DETAIL".
*/
public class FlyRecordDetailDao extends AbstractDao<FlyRecordDetail, Long> {

    public static final String TABLENAME = "FLY_RECORD_DETAIL";

    /**
     * Properties of entity FlyRecordDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RecordId = new Property(1, Long.class, "recordId", false, "RECORD_ID");
        public final static Property Latitude = new Property(2, double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(3, double.class, "longitude", false, "LONGITUDE");
        public final static Property Altitude = new Property(4, double.class, "altitude", false, "ALTITUDE");
        public final static Property Distance = new Property(5, double.class, "distance", false, "DISTANCE");
        public final static Property HorizontalSpeed = new Property(6, float.class, "horizontalSpeed", false, "HORIZONTAL_SPEED");
        public final static Property VerticalSpeed = new Property(7, float.class, "verticalSpeed", false, "VERTICAL_SPEED");
        public final static Property BatteryLevel = new Property(8, int.class, "batteryLevel", false, "BATTERY_LEVEL");
        public final static Property GpsMode = new Property(9, String.class, "gpsMode", false, "GPS_MODE");
        public final static Property Angle = new Property(10, double.class, "angle", false, "ANGLE");
        public final static Property CreateDate = new Property(11, java.util.Date.class, "createDate", false, "CREATE_DATE");
        public final static Property GpsSatelliteCount = new Property(12, int.class, "gpsSatelliteCount", false, "GPS_SATELLITE_COUNT");
        public final static Property LeftStickVerticalPos = new Property(13, int.class, "leftStickVerticalPos", false, "LEFT_STICK_VERTICAL_POS");
        public final static Property LeftStickHorizontalPos = new Property(14, int.class, "leftStickHorizontalPos", false, "LEFT_STICK_HORIZONTAL_POS");
        public final static Property RightStickVerticalPos = new Property(15, int.class, "rightStickVerticalPos", false, "RIGHT_STICK_VERTICAL_POS");
        public final static Property RightStickHorizontalPos = new Property(16, int.class, "rightStickHorizontalPos", false, "RIGHT_STICK_HORIZONTAL_POS");
        public final static Property RtkLatitude = new Property(17, double.class, "rtkLatitude", false, "RTK_LATITUDE");
        public final static Property RtkLongitude = new Property(18, double.class, "rtkLongitude", false, "RTK_LONGITUDE");
        public final static Property RtkAltitude = new Property(19, double.class, "rtkAltitude", false, "RTK_ALTITUDE");
        public final static Property Interrupt = new Property(20, boolean.class, "interrupt", false, "INTERRUPT");
        public final static Property RtkStatus = new Property(21, String.class, "rtkStatus", false, "RTK_STATUS");
    }

    private Query<FlyRecordDetail> flyRecord_FlyRecordDetailListQuery;

    public FlyRecordDetailDao(DaoConfig config) {
        super(config);
    }
    
    public FlyRecordDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FLY_RECORD_DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"RECORD_ID\" INTEGER," + // 1: recordId
                "\"LATITUDE\" REAL NOT NULL ," + // 2: latitude
                "\"LONGITUDE\" REAL NOT NULL ," + // 3: longitude
                "\"ALTITUDE\" REAL NOT NULL ," + // 4: altitude
                "\"DISTANCE\" REAL NOT NULL ," + // 5: distance
                "\"HORIZONTAL_SPEED\" REAL NOT NULL ," + // 6: horizontalSpeed
                "\"VERTICAL_SPEED\" REAL NOT NULL ," + // 7: verticalSpeed
                "\"BATTERY_LEVEL\" INTEGER NOT NULL ," + // 8: batteryLevel
                "\"GPS_MODE\" TEXT," + // 9: gpsMode
                "\"ANGLE\" REAL NOT NULL ," + // 10: angle
                "\"CREATE_DATE\" INTEGER," + // 11: createDate
                "\"GPS_SATELLITE_COUNT\" INTEGER NOT NULL ," + // 12: gpsSatelliteCount
                "\"LEFT_STICK_VERTICAL_POS\" INTEGER NOT NULL ," + // 13: leftStickVerticalPos
                "\"LEFT_STICK_HORIZONTAL_POS\" INTEGER NOT NULL ," + // 14: leftStickHorizontalPos
                "\"RIGHT_STICK_VERTICAL_POS\" INTEGER NOT NULL ," + // 15: rightStickVerticalPos
                "\"RIGHT_STICK_HORIZONTAL_POS\" INTEGER NOT NULL ," + // 16: rightStickHorizontalPos
                "\"RTK_LATITUDE\" REAL NOT NULL ," + // 17: rtkLatitude
                "\"RTK_LONGITUDE\" REAL NOT NULL ," + // 18: rtkLongitude
                "\"RTK_ALTITUDE\" REAL NOT NULL ," + // 19: rtkAltitude
                "\"INTERRUPT\" INTEGER NOT NULL ," + // 20: interrupt
                "\"RTK_STATUS\" TEXT);"); // 21: rtkStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FLY_RECORD_DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FlyRecordDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long recordId = entity.getRecordId();
        if (recordId != null) {
            stmt.bindLong(2, recordId);
        }
        stmt.bindDouble(3, entity.getLatitude());
        stmt.bindDouble(4, entity.getLongitude());
        stmt.bindDouble(5, entity.getAltitude());
        stmt.bindDouble(6, entity.getDistance());
        stmt.bindDouble(7, entity.getHorizontalSpeed());
        stmt.bindDouble(8, entity.getVerticalSpeed());
        stmt.bindLong(9, entity.getBatteryLevel());
 
        String gpsMode = entity.getGpsMode();
        if (gpsMode != null) {
            stmt.bindString(10, gpsMode);
        }
        stmt.bindDouble(11, entity.getAngle());
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(12, createDate.getTime());
        }
        stmt.bindLong(13, entity.getGpsSatelliteCount());
        stmt.bindLong(14, entity.getLeftStickVerticalPos());
        stmt.bindLong(15, entity.getLeftStickHorizontalPos());
        stmt.bindLong(16, entity.getRightStickVerticalPos());
        stmt.bindLong(17, entity.getRightStickHorizontalPos());
        stmt.bindDouble(18, entity.getRtkLatitude());
        stmt.bindDouble(19, entity.getRtkLongitude());
        stmt.bindDouble(20, entity.getRtkAltitude());
        stmt.bindLong(21, entity.getInterrupt() ? 1L: 0L);
 
        String rtkStatus = entity.getRtkStatus();
        if (rtkStatus != null) {
            stmt.bindString(22, rtkStatus);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FlyRecordDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long recordId = entity.getRecordId();
        if (recordId != null) {
            stmt.bindLong(2, recordId);
        }
        stmt.bindDouble(3, entity.getLatitude());
        stmt.bindDouble(4, entity.getLongitude());
        stmt.bindDouble(5, entity.getAltitude());
        stmt.bindDouble(6, entity.getDistance());
        stmt.bindDouble(7, entity.getHorizontalSpeed());
        stmt.bindDouble(8, entity.getVerticalSpeed());
        stmt.bindLong(9, entity.getBatteryLevel());
 
        String gpsMode = entity.getGpsMode();
        if (gpsMode != null) {
            stmt.bindString(10, gpsMode);
        }
        stmt.bindDouble(11, entity.getAngle());
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(12, createDate.getTime());
        }
        stmt.bindLong(13, entity.getGpsSatelliteCount());
        stmt.bindLong(14, entity.getLeftStickVerticalPos());
        stmt.bindLong(15, entity.getLeftStickHorizontalPos());
        stmt.bindLong(16, entity.getRightStickVerticalPos());
        stmt.bindLong(17, entity.getRightStickHorizontalPos());
        stmt.bindDouble(18, entity.getRtkLatitude());
        stmt.bindDouble(19, entity.getRtkLongitude());
        stmt.bindDouble(20, entity.getRtkAltitude());
        stmt.bindLong(21, entity.getInterrupt() ? 1L: 0L);
 
        String rtkStatus = entity.getRtkStatus();
        if (rtkStatus != null) {
            stmt.bindString(22, rtkStatus);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FlyRecordDetail readEntity(Cursor cursor, int offset) {
        FlyRecordDetail entity = new FlyRecordDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // recordId
            cursor.getDouble(offset + 2), // latitude
            cursor.getDouble(offset + 3), // longitude
            cursor.getDouble(offset + 4), // altitude
            cursor.getDouble(offset + 5), // distance
            cursor.getFloat(offset + 6), // horizontalSpeed
            cursor.getFloat(offset + 7), // verticalSpeed
            cursor.getInt(offset + 8), // batteryLevel
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // gpsMode
            cursor.getDouble(offset + 10), // angle
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // createDate
            cursor.getInt(offset + 12), // gpsSatelliteCount
            cursor.getInt(offset + 13), // leftStickVerticalPos
            cursor.getInt(offset + 14), // leftStickHorizontalPos
            cursor.getInt(offset + 15), // rightStickVerticalPos
            cursor.getInt(offset + 16), // rightStickHorizontalPos
            cursor.getDouble(offset + 17), // rtkLatitude
            cursor.getDouble(offset + 18), // rtkLongitude
            cursor.getDouble(offset + 19), // rtkAltitude
            cursor.getShort(offset + 20) != 0, // interrupt
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21) // rtkStatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FlyRecordDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRecordId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setLatitude(cursor.getDouble(offset + 2));
        entity.setLongitude(cursor.getDouble(offset + 3));
        entity.setAltitude(cursor.getDouble(offset + 4));
        entity.setDistance(cursor.getDouble(offset + 5));
        entity.setHorizontalSpeed(cursor.getFloat(offset + 6));
        entity.setVerticalSpeed(cursor.getFloat(offset + 7));
        entity.setBatteryLevel(cursor.getInt(offset + 8));
        entity.setGpsMode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAngle(cursor.getDouble(offset + 10));
        entity.setCreateDate(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setGpsSatelliteCount(cursor.getInt(offset + 12));
        entity.setLeftStickVerticalPos(cursor.getInt(offset + 13));
        entity.setLeftStickHorizontalPos(cursor.getInt(offset + 14));
        entity.setRightStickVerticalPos(cursor.getInt(offset + 15));
        entity.setRightStickHorizontalPos(cursor.getInt(offset + 16));
        entity.setRtkLatitude(cursor.getDouble(offset + 17));
        entity.setRtkLongitude(cursor.getDouble(offset + 18));
        entity.setRtkAltitude(cursor.getDouble(offset + 19));
        entity.setInterrupt(cursor.getShort(offset + 20) != 0);
        entity.setRtkStatus(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FlyRecordDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FlyRecordDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FlyRecordDetail entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "flyRecordDetailList" to-many relationship of FlyRecord. */
    public List<FlyRecordDetail> _queryFlyRecord_FlyRecordDetailList(Long recordId) {
        synchronized (this) {
            if (flyRecord_FlyRecordDetailListQuery == null) {
                QueryBuilder<FlyRecordDetail> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.RecordId.eq(null));
                flyRecord_FlyRecordDetailListQuery = queryBuilder.build();
            }
        }
        Query<FlyRecordDetail> query = flyRecord_FlyRecordDetailListQuery.forCurrentThread();
        query.setParameter(0, recordId);
        return query.list();
    }

}
