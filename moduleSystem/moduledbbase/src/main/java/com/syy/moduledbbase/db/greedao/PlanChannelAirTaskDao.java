package com.syy.moduledbbase.db.greedao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.syy.moduledbbase.db.entity.moduleuav.plantask.channel.DataBeanConverter;
import java.util.List;

import com.syy.moduledbbase.db.entity.moduleuav.plantask.channel.PlanChannelAirTask;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLAN_CHANNEL_AIR_TASK".
*/
public class PlanChannelAirTaskDao extends AbstractDao<PlanChannelAirTask, Long> {

    public static final String TABLENAME = "PLAN_CHANNEL_AIR_TASK";

    /**
     * Properties of entity PlanChannelAirTask.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property NId = new Property(0, Long.class, "nId", true, "_id");
        public final static Property Airlinetype = new Property(1, String.class, "airlinetype", false, "AIRLINETYPE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Id = new Property(3, String.class, "id", false, "ID");
        public final static Property Airlineversion = new Property(4, String.class, "airlineversion", false, "AIRLINEVERSION");
        public final static Property Fromtype = new Property(5, int.class, "fromtype", false, "FROMTYPE");
        public final static Property Data = new Property(6, String.class, "data", false, "DATA");
    }

    private final DataBeanConverter dataConverter = new DataBeanConverter();

    public PlanChannelAirTaskDao(DaoConfig config) {
        super(config);
    }
    
    public PlanChannelAirTaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLAN_CHANNEL_AIR_TASK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: nId
                "\"AIRLINETYPE\" TEXT," + // 1: airlinetype
                "\"NAME\" TEXT," + // 2: name
                "\"ID\" TEXT," + // 3: id
                "\"AIRLINEVERSION\" TEXT," + // 4: airlineversion
                "\"FROMTYPE\" INTEGER NOT NULL ," + // 5: fromtype
                "\"DATA\" TEXT);"); // 6: data
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLAN_CHANNEL_AIR_TASK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PlanChannelAirTask entity) {
        stmt.clearBindings();
 
        Long nId = entity.getNId();
        if (nId != null) {
            stmt.bindLong(1, nId);
        }
 
        String airlinetype = entity.getAirlinetype();
        if (airlinetype != null) {
            stmt.bindString(2, airlinetype);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(4, id);
        }
 
        String airlineversion = entity.getAirlineversion();
        if (airlineversion != null) {
            stmt.bindString(5, airlineversion);
        }
        stmt.bindLong(6, entity.getFromtype());
 
        List data = entity.getData();
        if (data != null) {
            stmt.bindString(7, dataConverter.convertToDatabaseValue(data));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PlanChannelAirTask entity) {
        stmt.clearBindings();
 
        Long nId = entity.getNId();
        if (nId != null) {
            stmt.bindLong(1, nId);
        }
 
        String airlinetype = entity.getAirlinetype();
        if (airlinetype != null) {
            stmt.bindString(2, airlinetype);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(4, id);
        }
 
        String airlineversion = entity.getAirlineversion();
        if (airlineversion != null) {
            stmt.bindString(5, airlineversion);
        }
        stmt.bindLong(6, entity.getFromtype());
 
        List data = entity.getData();
        if (data != null) {
            stmt.bindString(7, dataConverter.convertToDatabaseValue(data));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PlanChannelAirTask readEntity(Cursor cursor, int offset) {
        PlanChannelAirTask entity = new PlanChannelAirTask( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // nId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // airlinetype
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // airlineversion
            cursor.getInt(offset + 5), // fromtype
            cursor.isNull(offset + 6) ? null : dataConverter.convertToEntityProperty(cursor.getString(offset + 6)) // data
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PlanChannelAirTask entity, int offset) {
        entity.setNId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAirlinetype(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAirlineversion(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFromtype(cursor.getInt(offset + 5));
        entity.setData(cursor.isNull(offset + 6) ? null : dataConverter.convertToEntityProperty(cursor.getString(offset + 6)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PlanChannelAirTask entity, long rowId) {
        entity.setNId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PlanChannelAirTask entity) {
        if(entity != null) {
            return entity.getNId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PlanChannelAirTask entity) {
        return entity.getNId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
