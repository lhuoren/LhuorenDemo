package com.syy.moduledbbase.db.greedao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.syy.moduledbbase.db.entity.moduleuav.pointcloud.PointCloudDataBeanConverter;
import java.util.List;

import com.syy.moduledbbase.db.entity.moduleuav.pointcloud.PointCloudAirTaskBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POINT_CLOUD_AIR_TASK_BEAN".
*/
public class PointCloudAirTaskBeanDao extends AbstractDao<PointCloudAirTaskBean, Long> {

    public static final String TABLENAME = "POINT_CLOUD_AIR_TASK_BEAN";

    /**
     * Properties of entity PointCloudAirTaskBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Missiontype = new Property(1, int.class, "missiontype", false, "MISSIONTYPE");
        public final static Property AirLineTaskId = new Property(2, String.class, "airLineTaskId", false, "AIR_LINE_TASK_ID");
        public final static Property Airlineversion = new Property(3, String.class, "airlineversion", false, "AIRLINEVERSION");
        public final static Property TaskMode = new Property(4, int.class, "taskMode", false, "TASK_MODE");
        public final static Property FlyType = new Property(5, int.class, "flyType", false, "FLY_TYPE");
        public final static Property FlySpeed = new Property(6, double.class, "flySpeed", false, "FLY_SPEED");
        public final static Property WorkSpeed = new Property(7, double.class, "workSpeed", false, "WORK_SPEED");
        public final static Property BackSpeed = new Property(8, double.class, "backSpeed", false, "BACK_SPEED");
        public final static Property TakeOffHeight = new Property(9, double.class, "takeOffHeight", false, "TAKE_OFF_HEIGHT");
        public final static Property BackMode = new Property(10, int.class, "backMode", false, "BACK_MODE");
        public final static Property SurroundDistance = new Property(11, int.class, "surroundDistance", false, "SURROUND_DISTANCE");
        public final static Property RectifyLatitude = new Property(12, double.class, "rectifyLatitude", false, "RECTIFY_LATITUDE");
        public final static Property RectifyLongitude = new Property(13, double.class, "rectifyLongitude", false, "RECTIFY_LONGITUDE");
        public final static Property RectifyAlt = new Property(14, double.class, "rectifyAlt", false, "RECTIFY_ALT");
        public final static Property Waypoint = new Property(15, String.class, "waypoint", false, "WAYPOINT");
        public final static Property CreateDate = new Property(16, java.util.Date.class, "createDate", false, "CREATE_DATE");
    }

    private final PointCloudDataBeanConverter waypointConverter = new PointCloudDataBeanConverter();

    public PointCloudAirTaskBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PointCloudAirTaskBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POINT_CLOUD_AIR_TASK_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MISSIONTYPE\" INTEGER NOT NULL ," + // 1: missiontype
                "\"AIR_LINE_TASK_ID\" TEXT UNIQUE ," + // 2: airLineTaskId
                "\"AIRLINEVERSION\" TEXT," + // 3: airlineversion
                "\"TASK_MODE\" INTEGER NOT NULL ," + // 4: taskMode
                "\"FLY_TYPE\" INTEGER NOT NULL ," + // 5: flyType
                "\"FLY_SPEED\" REAL NOT NULL ," + // 6: flySpeed
                "\"WORK_SPEED\" REAL NOT NULL ," + // 7: workSpeed
                "\"BACK_SPEED\" REAL NOT NULL ," + // 8: backSpeed
                "\"TAKE_OFF_HEIGHT\" REAL NOT NULL ," + // 9: takeOffHeight
                "\"BACK_MODE\" INTEGER NOT NULL ," + // 10: backMode
                "\"SURROUND_DISTANCE\" INTEGER NOT NULL ," + // 11: surroundDistance
                "\"RECTIFY_LATITUDE\" REAL NOT NULL ," + // 12: rectifyLatitude
                "\"RECTIFY_LONGITUDE\" REAL NOT NULL ," + // 13: rectifyLongitude
                "\"RECTIFY_ALT\" REAL NOT NULL ," + // 14: rectifyAlt
                "\"WAYPOINT\" TEXT," + // 15: waypoint
                "\"CREATE_DATE\" INTEGER);"); // 16: createDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POINT_CLOUD_AIR_TASK_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PointCloudAirTaskBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMissiontype());
 
        String airLineTaskId = entity.getAirLineTaskId();
        if (airLineTaskId != null) {
            stmt.bindString(3, airLineTaskId);
        }
 
        String airlineversion = entity.getAirlineversion();
        if (airlineversion != null) {
            stmt.bindString(4, airlineversion);
        }
        stmt.bindLong(5, entity.getTaskMode());
        stmt.bindLong(6, entity.getFlyType());
        stmt.bindDouble(7, entity.getFlySpeed());
        stmt.bindDouble(8, entity.getWorkSpeed());
        stmt.bindDouble(9, entity.getBackSpeed());
        stmt.bindDouble(10, entity.getTakeOffHeight());
        stmt.bindLong(11, entity.getBackMode());
        stmt.bindLong(12, entity.getSurroundDistance());
        stmt.bindDouble(13, entity.getRectifyLatitude());
        stmt.bindDouble(14, entity.getRectifyLongitude());
        stmt.bindDouble(15, entity.getRectifyAlt());
 
        List waypoint = entity.getWaypoint();
        if (waypoint != null) {
            stmt.bindString(16, waypointConverter.convertToDatabaseValue(waypoint));
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(17, createDate.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PointCloudAirTaskBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMissiontype());
 
        String airLineTaskId = entity.getAirLineTaskId();
        if (airLineTaskId != null) {
            stmt.bindString(3, airLineTaskId);
        }
 
        String airlineversion = entity.getAirlineversion();
        if (airlineversion != null) {
            stmt.bindString(4, airlineversion);
        }
        stmt.bindLong(5, entity.getTaskMode());
        stmt.bindLong(6, entity.getFlyType());
        stmt.bindDouble(7, entity.getFlySpeed());
        stmt.bindDouble(8, entity.getWorkSpeed());
        stmt.bindDouble(9, entity.getBackSpeed());
        stmt.bindDouble(10, entity.getTakeOffHeight());
        stmt.bindLong(11, entity.getBackMode());
        stmt.bindLong(12, entity.getSurroundDistance());
        stmt.bindDouble(13, entity.getRectifyLatitude());
        stmt.bindDouble(14, entity.getRectifyLongitude());
        stmt.bindDouble(15, entity.getRectifyAlt());
 
        List waypoint = entity.getWaypoint();
        if (waypoint != null) {
            stmt.bindString(16, waypointConverter.convertToDatabaseValue(waypoint));
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(17, createDate.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PointCloudAirTaskBean readEntity(Cursor cursor, int offset) {
        PointCloudAirTaskBean entity = new PointCloudAirTaskBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // missiontype
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // airLineTaskId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // airlineversion
            cursor.getInt(offset + 4), // taskMode
            cursor.getInt(offset + 5), // flyType
            cursor.getDouble(offset + 6), // flySpeed
            cursor.getDouble(offset + 7), // workSpeed
            cursor.getDouble(offset + 8), // backSpeed
            cursor.getDouble(offset + 9), // takeOffHeight
            cursor.getInt(offset + 10), // backMode
            cursor.getInt(offset + 11), // surroundDistance
            cursor.getDouble(offset + 12), // rectifyLatitude
            cursor.getDouble(offset + 13), // rectifyLongitude
            cursor.getDouble(offset + 14), // rectifyAlt
            cursor.isNull(offset + 15) ? null : waypointConverter.convertToEntityProperty(cursor.getString(offset + 15)), // waypoint
            cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)) // createDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PointCloudAirTaskBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMissiontype(cursor.getInt(offset + 1));
        entity.setAirLineTaskId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAirlineversion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTaskMode(cursor.getInt(offset + 4));
        entity.setFlyType(cursor.getInt(offset + 5));
        entity.setFlySpeed(cursor.getDouble(offset + 6));
        entity.setWorkSpeed(cursor.getDouble(offset + 7));
        entity.setBackSpeed(cursor.getDouble(offset + 8));
        entity.setTakeOffHeight(cursor.getDouble(offset + 9));
        entity.setBackMode(cursor.getInt(offset + 10));
        entity.setSurroundDistance(cursor.getInt(offset + 11));
        entity.setRectifyLatitude(cursor.getDouble(offset + 12));
        entity.setRectifyLongitude(cursor.getDouble(offset + 13));
        entity.setRectifyAlt(cursor.getDouble(offset + 14));
        entity.setWaypoint(cursor.isNull(offset + 15) ? null : waypointConverter.convertToEntityProperty(cursor.getString(offset + 15)));
        entity.setCreateDate(cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PointCloudAirTaskBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PointCloudAirTaskBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PointCloudAirTaskBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
