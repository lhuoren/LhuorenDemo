package com.syy.moduledbbase.db.greedao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.syy.moduledbbase.db.entity.modulecommon.TaskParams;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK_PARAMS".
*/
public class TaskParamsDao extends AbstractDao<TaskParams, Long> {

    public static final String TABLENAME = "TASK_PARAMS";

    /**
     * Properties of entity TaskParams.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SideOverlap = new Property(1, double.class, "sideOverlap", false, "SIDE_OVERLAP");
        public final static Property CourseOverlap = new Property(2, double.class, "courseOverlap", false, "COURSE_OVERLAP");
        public final static Property FlyHeight = new Property(3, double.class, "flyHeight", false, "FLY_HEIGHT");
        public final static Property TakeOffHeight = new Property(4, double.class, "takeOffHeight", false, "TAKE_OFF_HEIGHT");
        public final static Property DatumHeight = new Property(5, double.class, "datumHeight", false, "DATUM_HEIGHT");
        public final static Property Buffer = new Property(6, double.class, "buffer", false, "BUFFER");
        public final static Property SlantingAngle = new Property(7, double.class, "slantingAngle", false, "SLANTING_ANGLE");
        public final static Property TaskMode = new Property(8, int.class, "taskMode", false, "TASK_MODE");
        public final static Property BackMode = new Property(9, int.class, "backMode", false, "BACK_MODE");
        public final static Property FlySpeed = new Property(10, double.class, "flySpeed", false, "FLY_SPEED");
        public final static Property FlyYaw = new Property(11, double.class, "flyYaw", false, "FLY_YAW");
        public final static Property SlantingType = new Property(12, int.class, "slantingType", false, "SLANTING_TYPE");
        public final static Property RotationAngle = new Property(13, double.class, "rotationAngle", false, "ROTATION_ANGLE");
        public final static Property SurroundDistance = new Property(14, double.class, "surroundDistance", false, "SURROUND_DISTANCE");
        public final static Property Density = new Property(15, double.class, "density", false, "DENSITY");
        public final static Property SurroundMode = new Property(16, int.class, "surroundMode", false, "SURROUND_MODE");
        public final static Property OffsetHeight = new Property(17, double.class, "offsetHeight", false, "OFFSET_HEIGHT");
        public final static Property TopAngle = new Property(18, double.class, "topAngle", false, "TOP_ANGLE");
        public final static Property EnableTop = new Property(19, boolean.class, "enableTop", false, "ENABLE_TOP");
        public final static Property PathMode = new Property(20, int.class, "pathMode", false, "PATH_MODE");
        public final static Property TowerMode = new Property(21, int.class, "towerMode", false, "TOWER_MODE");
        public final static Property IsManifold = new Property(22, boolean.class, "isManifold", false, "IS_MANIFOLD");
        public final static Property FlyType = new Property(23, int.class, "flyType", false, "FLY_TYPE");
        public final static Property EnableChangeHeight = new Property(24, boolean.class, "enableChangeHeight", false, "ENABLE_CHANGE_HEIGHT");
        public final static Property FineOrder = new Property(25, int.class, "fineOrder", false, "FINE_ORDER");
        public final static Property AirlineType = new Property(26, int.class, "airlineType", false, "AIRLINE_TYPE");
        public final static Property WorkSpeed = new Property(27, double.class, "workSpeed", false, "WORK_SPEED");
        public final static Property BaseStationAltitude = new Property(28, double.class, "baseStationAltitude", false, "BASE_STATION_ALTITUDE");
        public final static Property Resolution = new Property(29, double.class, "resolution", false, "RESOLUTION");
        public final static Property BackSpeed = new Property(30, double.class, "backSpeed", false, "BACK_SPEED");
    }


    public TaskParamsDao(DaoConfig config) {
        super(config);
    }
    
    public TaskParamsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK_PARAMS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SIDE_OVERLAP\" REAL NOT NULL ," + // 1: sideOverlap
                "\"COURSE_OVERLAP\" REAL NOT NULL ," + // 2: courseOverlap
                "\"FLY_HEIGHT\" REAL NOT NULL ," + // 3: flyHeight
                "\"TAKE_OFF_HEIGHT\" REAL NOT NULL ," + // 4: takeOffHeight
                "\"DATUM_HEIGHT\" REAL NOT NULL ," + // 5: datumHeight
                "\"BUFFER\" REAL NOT NULL ," + // 6: buffer
                "\"SLANTING_ANGLE\" REAL NOT NULL ," + // 7: slantingAngle
                "\"TASK_MODE\" INTEGER NOT NULL ," + // 8: taskMode
                "\"BACK_MODE\" INTEGER NOT NULL ," + // 9: backMode
                "\"FLY_SPEED\" REAL NOT NULL ," + // 10: flySpeed
                "\"FLY_YAW\" REAL NOT NULL ," + // 11: flyYaw
                "\"SLANTING_TYPE\" INTEGER NOT NULL ," + // 12: slantingType
                "\"ROTATION_ANGLE\" REAL NOT NULL ," + // 13: rotationAngle
                "\"SURROUND_DISTANCE\" REAL NOT NULL ," + // 14: surroundDistance
                "\"DENSITY\" REAL NOT NULL ," + // 15: density
                "\"SURROUND_MODE\" INTEGER NOT NULL ," + // 16: surroundMode
                "\"OFFSET_HEIGHT\" REAL NOT NULL ," + // 17: offsetHeight
                "\"TOP_ANGLE\" REAL NOT NULL ," + // 18: topAngle
                "\"ENABLE_TOP\" INTEGER NOT NULL ," + // 19: enableTop
                "\"PATH_MODE\" INTEGER NOT NULL ," + // 20: pathMode
                "\"TOWER_MODE\" INTEGER NOT NULL ," + // 21: towerMode
                "\"IS_MANIFOLD\" INTEGER NOT NULL ," + // 22: isManifold
                "\"FLY_TYPE\" INTEGER NOT NULL ," + // 23: flyType
                "\"ENABLE_CHANGE_HEIGHT\" INTEGER NOT NULL ," + // 24: enableChangeHeight
                "\"FINE_ORDER\" INTEGER NOT NULL ," + // 25: fineOrder
                "\"AIRLINE_TYPE\" INTEGER NOT NULL ," + // 26: airlineType
                "\"WORK_SPEED\" REAL NOT NULL ," + // 27: workSpeed
                "\"BASE_STATION_ALTITUDE\" REAL NOT NULL ," + // 28: baseStationAltitude
                "\"RESOLUTION\" REAL NOT NULL ," + // 29: resolution
                "\"BACK_SPEED\" REAL NOT NULL );"); // 30: backSpeed
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK_PARAMS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TaskParams entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindDouble(2, entity.getSideOverlap());
        stmt.bindDouble(3, entity.getCourseOverlap());
        stmt.bindDouble(4, entity.getFlyHeight());
        stmt.bindDouble(5, entity.getTakeOffHeight());
        stmt.bindDouble(6, entity.getDatumHeight());
        stmt.bindDouble(7, entity.getBuffer());
        stmt.bindDouble(8, entity.getSlantingAngle());
        stmt.bindLong(9, entity.getTaskMode());
        stmt.bindLong(10, entity.getBackMode());
        stmt.bindDouble(11, entity.getFlySpeed());
        stmt.bindDouble(12, entity.getFlyYaw());
        stmt.bindLong(13, entity.getSlantingType());
        stmt.bindDouble(14, entity.getRotationAngle());
        stmt.bindDouble(15, entity.getSurroundDistance());
        stmt.bindDouble(16, entity.getDensity());
        stmt.bindLong(17, entity.getSurroundMode());
        stmt.bindDouble(18, entity.getOffsetHeight());
        stmt.bindDouble(19, entity.getTopAngle());
        stmt.bindLong(20, entity.getEnableTop() ? 1L: 0L);
        stmt.bindLong(21, entity.getPathMode());
        stmt.bindLong(22, entity.getTowerMode());
        stmt.bindLong(23, entity.getIsManifold() ? 1L: 0L);
        stmt.bindLong(24, entity.getFlyType());
        stmt.bindLong(25, entity.getEnableChangeHeight() ? 1L: 0L);
        stmt.bindLong(26, entity.getFineOrder());
        stmt.bindLong(27, entity.getAirlineType());
        stmt.bindDouble(28, entity.getWorkSpeed());
        stmt.bindDouble(29, entity.getBaseStationAltitude());
        stmt.bindDouble(30, entity.getResolution());
        stmt.bindDouble(31, entity.getBackSpeed());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TaskParams entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindDouble(2, entity.getSideOverlap());
        stmt.bindDouble(3, entity.getCourseOverlap());
        stmt.bindDouble(4, entity.getFlyHeight());
        stmt.bindDouble(5, entity.getTakeOffHeight());
        stmt.bindDouble(6, entity.getDatumHeight());
        stmt.bindDouble(7, entity.getBuffer());
        stmt.bindDouble(8, entity.getSlantingAngle());
        stmt.bindLong(9, entity.getTaskMode());
        stmt.bindLong(10, entity.getBackMode());
        stmt.bindDouble(11, entity.getFlySpeed());
        stmt.bindDouble(12, entity.getFlyYaw());
        stmt.bindLong(13, entity.getSlantingType());
        stmt.bindDouble(14, entity.getRotationAngle());
        stmt.bindDouble(15, entity.getSurroundDistance());
        stmt.bindDouble(16, entity.getDensity());
        stmt.bindLong(17, entity.getSurroundMode());
        stmt.bindDouble(18, entity.getOffsetHeight());
        stmt.bindDouble(19, entity.getTopAngle());
        stmt.bindLong(20, entity.getEnableTop() ? 1L: 0L);
        stmt.bindLong(21, entity.getPathMode());
        stmt.bindLong(22, entity.getTowerMode());
        stmt.bindLong(23, entity.getIsManifold() ? 1L: 0L);
        stmt.bindLong(24, entity.getFlyType());
        stmt.bindLong(25, entity.getEnableChangeHeight() ? 1L: 0L);
        stmt.bindLong(26, entity.getFineOrder());
        stmt.bindLong(27, entity.getAirlineType());
        stmt.bindDouble(28, entity.getWorkSpeed());
        stmt.bindDouble(29, entity.getBaseStationAltitude());
        stmt.bindDouble(30, entity.getResolution());
        stmt.bindDouble(31, entity.getBackSpeed());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TaskParams readEntity(Cursor cursor, int offset) {
        TaskParams entity = new TaskParams( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getDouble(offset + 1), // sideOverlap
            cursor.getDouble(offset + 2), // courseOverlap
            cursor.getDouble(offset + 3), // flyHeight
            cursor.getDouble(offset + 4), // takeOffHeight
            cursor.getDouble(offset + 5), // datumHeight
            cursor.getDouble(offset + 6), // buffer
            cursor.getDouble(offset + 7), // slantingAngle
            cursor.getInt(offset + 8), // taskMode
            cursor.getInt(offset + 9), // backMode
            cursor.getDouble(offset + 10), // flySpeed
            cursor.getDouble(offset + 11), // flyYaw
            cursor.getInt(offset + 12), // slantingType
            cursor.getDouble(offset + 13), // rotationAngle
            cursor.getDouble(offset + 14), // surroundDistance
            cursor.getDouble(offset + 15), // density
            cursor.getInt(offset + 16), // surroundMode
            cursor.getDouble(offset + 17), // offsetHeight
            cursor.getDouble(offset + 18), // topAngle
            cursor.getShort(offset + 19) != 0, // enableTop
            cursor.getInt(offset + 20), // pathMode
            cursor.getInt(offset + 21), // towerMode
            cursor.getShort(offset + 22) != 0, // isManifold
            cursor.getInt(offset + 23), // flyType
            cursor.getShort(offset + 24) != 0, // enableChangeHeight
            cursor.getInt(offset + 25), // fineOrder
            cursor.getInt(offset + 26), // airlineType
            cursor.getDouble(offset + 27), // workSpeed
            cursor.getDouble(offset + 28), // baseStationAltitude
            cursor.getDouble(offset + 29), // resolution
            cursor.getDouble(offset + 30) // backSpeed
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TaskParams entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSideOverlap(cursor.getDouble(offset + 1));
        entity.setCourseOverlap(cursor.getDouble(offset + 2));
        entity.setFlyHeight(cursor.getDouble(offset + 3));
        entity.setTakeOffHeight(cursor.getDouble(offset + 4));
        entity.setDatumHeight(cursor.getDouble(offset + 5));
        entity.setBuffer(cursor.getDouble(offset + 6));
        entity.setSlantingAngle(cursor.getDouble(offset + 7));
        entity.setTaskMode(cursor.getInt(offset + 8));
        entity.setBackMode(cursor.getInt(offset + 9));
        entity.setFlySpeed(cursor.getDouble(offset + 10));
        entity.setFlyYaw(cursor.getDouble(offset + 11));
        entity.setSlantingType(cursor.getInt(offset + 12));
        entity.setRotationAngle(cursor.getDouble(offset + 13));
        entity.setSurroundDistance(cursor.getDouble(offset + 14));
        entity.setDensity(cursor.getDouble(offset + 15));
        entity.setSurroundMode(cursor.getInt(offset + 16));
        entity.setOffsetHeight(cursor.getDouble(offset + 17));
        entity.setTopAngle(cursor.getDouble(offset + 18));
        entity.setEnableTop(cursor.getShort(offset + 19) != 0);
        entity.setPathMode(cursor.getInt(offset + 20));
        entity.setTowerMode(cursor.getInt(offset + 21));
        entity.setIsManifold(cursor.getShort(offset + 22) != 0);
        entity.setFlyType(cursor.getInt(offset + 23));
        entity.setEnableChangeHeight(cursor.getShort(offset + 24) != 0);
        entity.setFineOrder(cursor.getInt(offset + 25));
        entity.setAirlineType(cursor.getInt(offset + 26));
        entity.setWorkSpeed(cursor.getDouble(offset + 27));
        entity.setBaseStationAltitude(cursor.getDouble(offset + 28));
        entity.setResolution(cursor.getDouble(offset + 29));
        entity.setBackSpeed(cursor.getDouble(offset + 30));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TaskParams entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TaskParams entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TaskParams entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
