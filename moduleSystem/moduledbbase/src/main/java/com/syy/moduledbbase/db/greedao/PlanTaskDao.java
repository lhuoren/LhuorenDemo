package com.syy.moduledbbase.db.greedao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.syy.moduledbbase.db.entity.moduleuav.plantask.AirlinesBeanConverter;
import com.syy.moduledbbase.db.entity.moduleuav.plantask.TasklinesBeanConverter;
import java.util.List;

import com.syy.moduledbbase.db.entity.moduleuav.plantask.PlanTask;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLAN_TASK".
*/
public class PlanTaskDao extends AbstractDao<PlanTask, Long> {

    public static final String TABLENAME = "PLAN_TASK";

    /**
     * Properties of entity PlanTask.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property NId = new Property(0, Long.class, "nId", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property CreateDate = new Property(2, long.class, "createDate", false, "CREATE_DATE");
        public final static Property UpdateDate = new Property(3, long.class, "updateDate", false, "UPDATE_DATE");
        public final static Property Planid = new Property(4, String.class, "planid", false, "PLANID");
        public final static Property Plantype = new Property(5, int.class, "plantype", false, "PLANTYPE");
        public final static Property Workmasteruaccount = new Property(6, String.class, "workmasteruaccount", false, "WORKMASTERUACCOUNT");
        public final static Property Workmasteruname = new Property(7, String.class, "workmasteruname", false, "WORKMASTERUNAME");
        public final static Property Plancreatetime = new Property(8, long.class, "plancreatetime", false, "PLANCREATETIME");
        public final static Property Planstarttime = new Property(9, long.class, "planstarttime", false, "PLANSTARTTIME");
        public final static Property Planendtime = new Property(10, long.class, "planendtime", false, "PLANENDTIME");
        public final static Property Powergridflag = new Property(11, int.class, "powergridflag", false, "POWERGRIDFLAG");
        public final static Property Worktype = new Property(12, int.class, "worktype", false, "WORKTYPE");
        public final static Property Jobcontent = new Property(13, String.class, "jobcontent", false, "JOBCONTENT");
        public final static Property Workresult = new Property(14, String.class, "workresult", false, "WORKRESULT");
        public final static Property Gmptaskstate = new Property(15, int.class, "gmptaskstate", false, "GMPTASKSTATE");
        public final static Property Workmemberunames = new Property(16, String.class, "workmemberunames", false, "WORKMEMBERUNAMES");
        public final static Property Taskstate = new Property(17, int.class, "taskstate", false, "TASKSTATE");
        public final static Property Airlinest = new Property(18, int.class, "airlinest", false, "AIRLINEST");
        public final static Property Tasklines = new Property(19, String.class, "tasklines", false, "TASKLINES");
        public final static Property Airlines = new Property(20, String.class, "airlines", false, "AIRLINES");
    }

    private final TasklinesBeanConverter tasklinesConverter = new TasklinesBeanConverter();
    private final AirlinesBeanConverter airlinesConverter = new AirlinesBeanConverter();

    public PlanTaskDao(DaoConfig config) {
        super(config);
    }
    
    public PlanTaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLAN_TASK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: nId
                "\"ID\" TEXT," + // 1: id
                "\"CREATE_DATE\" INTEGER NOT NULL ," + // 2: createDate
                "\"UPDATE_DATE\" INTEGER NOT NULL ," + // 3: updateDate
                "\"PLANID\" TEXT," + // 4: planid
                "\"PLANTYPE\" INTEGER NOT NULL ," + // 5: plantype
                "\"WORKMASTERUACCOUNT\" TEXT," + // 6: workmasteruaccount
                "\"WORKMASTERUNAME\" TEXT," + // 7: workmasteruname
                "\"PLANCREATETIME\" INTEGER NOT NULL ," + // 8: plancreatetime
                "\"PLANSTARTTIME\" INTEGER NOT NULL ," + // 9: planstarttime
                "\"PLANENDTIME\" INTEGER NOT NULL ," + // 10: planendtime
                "\"POWERGRIDFLAG\" INTEGER NOT NULL ," + // 11: powergridflag
                "\"WORKTYPE\" INTEGER NOT NULL ," + // 12: worktype
                "\"JOBCONTENT\" TEXT," + // 13: jobcontent
                "\"WORKRESULT\" TEXT," + // 14: workresult
                "\"GMPTASKSTATE\" INTEGER NOT NULL ," + // 15: gmptaskstate
                "\"WORKMEMBERUNAMES\" TEXT," + // 16: workmemberunames
                "\"TASKSTATE\" INTEGER NOT NULL ," + // 17: taskstate
                "\"AIRLINEST\" INTEGER NOT NULL ," + // 18: airlinest
                "\"TASKLINES\" TEXT," + // 19: tasklines
                "\"AIRLINES\" TEXT);"); // 20: airlines
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLAN_TASK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PlanTask entity) {
        stmt.clearBindings();
 
        Long nId = entity.getNId();
        if (nId != null) {
            stmt.bindLong(1, nId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
        stmt.bindLong(3, entity.getCreateDate());
        stmt.bindLong(4, entity.getUpdateDate());
 
        String planid = entity.getPlanid();
        if (planid != null) {
            stmt.bindString(5, planid);
        }
        stmt.bindLong(6, entity.getPlantype());
 
        String workmasteruaccount = entity.getWorkmasteruaccount();
        if (workmasteruaccount != null) {
            stmt.bindString(7, workmasteruaccount);
        }
 
        String workmasteruname = entity.getWorkmasteruname();
        if (workmasteruname != null) {
            stmt.bindString(8, workmasteruname);
        }
        stmt.bindLong(9, entity.getPlancreatetime());
        stmt.bindLong(10, entity.getPlanstarttime());
        stmt.bindLong(11, entity.getPlanendtime());
        stmt.bindLong(12, entity.getPowergridflag());
        stmt.bindLong(13, entity.getWorktype());
 
        String jobcontent = entity.getJobcontent();
        if (jobcontent != null) {
            stmt.bindString(14, jobcontent);
        }
 
        String workresult = entity.getWorkresult();
        if (workresult != null) {
            stmt.bindString(15, workresult);
        }
        stmt.bindLong(16, entity.getGmptaskstate());
 
        String workmemberunames = entity.getWorkmemberunames();
        if (workmemberunames != null) {
            stmt.bindString(17, workmemberunames);
        }
        stmt.bindLong(18, entity.getTaskstate());
        stmt.bindLong(19, entity.getAirlinest());
 
        List tasklines = entity.getTasklines();
        if (tasklines != null) {
            stmt.bindString(20, tasklinesConverter.convertToDatabaseValue(tasklines));
        }
 
        List airlines = entity.getAirlines();
        if (airlines != null) {
            stmt.bindString(21, airlinesConverter.convertToDatabaseValue(airlines));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PlanTask entity) {
        stmt.clearBindings();
 
        Long nId = entity.getNId();
        if (nId != null) {
            stmt.bindLong(1, nId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
        stmt.bindLong(3, entity.getCreateDate());
        stmt.bindLong(4, entity.getUpdateDate());
 
        String planid = entity.getPlanid();
        if (planid != null) {
            stmt.bindString(5, planid);
        }
        stmt.bindLong(6, entity.getPlantype());
 
        String workmasteruaccount = entity.getWorkmasteruaccount();
        if (workmasteruaccount != null) {
            stmt.bindString(7, workmasteruaccount);
        }
 
        String workmasteruname = entity.getWorkmasteruname();
        if (workmasteruname != null) {
            stmt.bindString(8, workmasteruname);
        }
        stmt.bindLong(9, entity.getPlancreatetime());
        stmt.bindLong(10, entity.getPlanstarttime());
        stmt.bindLong(11, entity.getPlanendtime());
        stmt.bindLong(12, entity.getPowergridflag());
        stmt.bindLong(13, entity.getWorktype());
 
        String jobcontent = entity.getJobcontent();
        if (jobcontent != null) {
            stmt.bindString(14, jobcontent);
        }
 
        String workresult = entity.getWorkresult();
        if (workresult != null) {
            stmt.bindString(15, workresult);
        }
        stmt.bindLong(16, entity.getGmptaskstate());
 
        String workmemberunames = entity.getWorkmemberunames();
        if (workmemberunames != null) {
            stmt.bindString(17, workmemberunames);
        }
        stmt.bindLong(18, entity.getTaskstate());
        stmt.bindLong(19, entity.getAirlinest());
 
        List tasklines = entity.getTasklines();
        if (tasklines != null) {
            stmt.bindString(20, tasklinesConverter.convertToDatabaseValue(tasklines));
        }
 
        List airlines = entity.getAirlines();
        if (airlines != null) {
            stmt.bindString(21, airlinesConverter.convertToDatabaseValue(airlines));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PlanTask readEntity(Cursor cursor, int offset) {
        PlanTask entity = new PlanTask( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // nId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.getLong(offset + 2), // createDate
            cursor.getLong(offset + 3), // updateDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // planid
            cursor.getInt(offset + 5), // plantype
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // workmasteruaccount
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // workmasteruname
            cursor.getLong(offset + 8), // plancreatetime
            cursor.getLong(offset + 9), // planstarttime
            cursor.getLong(offset + 10), // planendtime
            cursor.getInt(offset + 11), // powergridflag
            cursor.getInt(offset + 12), // worktype
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // jobcontent
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // workresult
            cursor.getInt(offset + 15), // gmptaskstate
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // workmemberunames
            cursor.getInt(offset + 17), // taskstate
            cursor.getInt(offset + 18), // airlinest
            cursor.isNull(offset + 19) ? null : tasklinesConverter.convertToEntityProperty(cursor.getString(offset + 19)), // tasklines
            cursor.isNull(offset + 20) ? null : airlinesConverter.convertToEntityProperty(cursor.getString(offset + 20)) // airlines
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PlanTask entity, int offset) {
        entity.setNId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreateDate(cursor.getLong(offset + 2));
        entity.setUpdateDate(cursor.getLong(offset + 3));
        entity.setPlanid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPlantype(cursor.getInt(offset + 5));
        entity.setWorkmasteruaccount(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWorkmasteruname(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPlancreatetime(cursor.getLong(offset + 8));
        entity.setPlanstarttime(cursor.getLong(offset + 9));
        entity.setPlanendtime(cursor.getLong(offset + 10));
        entity.setPowergridflag(cursor.getInt(offset + 11));
        entity.setWorktype(cursor.getInt(offset + 12));
        entity.setJobcontent(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setWorkresult(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setGmptaskstate(cursor.getInt(offset + 15));
        entity.setWorkmemberunames(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setTaskstate(cursor.getInt(offset + 17));
        entity.setAirlinest(cursor.getInt(offset + 18));
        entity.setTasklines(cursor.isNull(offset + 19) ? null : tasklinesConverter.convertToEntityProperty(cursor.getString(offset + 19)));
        entity.setAirlines(cursor.isNull(offset + 20) ? null : airlinesConverter.convertToEntityProperty(cursor.getString(offset + 20)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PlanTask entity, long rowId) {
        entity.setNId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PlanTask entity) {
        if(entity != null) {
            return entity.getNId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PlanTask entity) {
        return entity.getNId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
