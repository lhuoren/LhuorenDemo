package com.syy.moduledbbase.db.greedao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.syy.moduledbbase.db.entity.moduleuav.FineStep;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FINE_STEP".
*/
public class FineStepDao extends AbstractDao<FineStep, Long> {

    public static final String TABLENAME = "FINE_STEP";

    /**
     * Properties of entity FineStep.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Sort = new Property(1, int.class, "sort", false, "SORT");
        public final static Property LineName = new Property(2, String.class, "lineName", false, "LINE_NAME");
        public final static Property TowerName = new Property(3, String.class, "towerName", false, "TOWER_NAME");
        public final static Property TargetName = new Property(4, String.class, "targetName", false, "TARGET_NAME");
        public final static Property SlantingAngle = new Property(5, double.class, "slantingAngle", false, "SLANTING_ANGLE");
        public final static Property FlyYaw = new Property(6, double.class, "flyYaw", false, "FLY_YAW");
        public final static Property Latitude = new Property(7, double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(8, double.class, "longitude", false, "LONGITUDE");
        public final static Property Altitude = new Property(9, double.class, "altitude", false, "ALTITUDE");
        public final static Property HomeLatitude = new Property(10, double.class, "homeLatitude", false, "HOME_LATITUDE");
        public final static Property HomeLongitude = new Property(11, double.class, "homeLongitude", false, "HOME_LONGITUDE");
        public final static Property Type = new Property(12, double.class, "type", false, "TYPE");
    }


    public FineStepDao(DaoConfig config) {
        super(config);
    }
    
    public FineStepDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FINE_STEP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SORT\" INTEGER NOT NULL ," + // 1: sort
                "\"LINE_NAME\" TEXT," + // 2: lineName
                "\"TOWER_NAME\" TEXT," + // 3: towerName
                "\"TARGET_NAME\" TEXT," + // 4: targetName
                "\"SLANTING_ANGLE\" REAL NOT NULL ," + // 5: slantingAngle
                "\"FLY_YAW\" REAL NOT NULL ," + // 6: flyYaw
                "\"LATITUDE\" REAL NOT NULL ," + // 7: latitude
                "\"LONGITUDE\" REAL NOT NULL ," + // 8: longitude
                "\"ALTITUDE\" REAL NOT NULL ," + // 9: altitude
                "\"HOME_LATITUDE\" REAL NOT NULL ," + // 10: homeLatitude
                "\"HOME_LONGITUDE\" REAL NOT NULL ," + // 11: homeLongitude
                "\"TYPE\" REAL NOT NULL );"); // 12: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FINE_STEP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FineStep entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSort());
 
        String lineName = entity.getLineName();
        if (lineName != null) {
            stmt.bindString(3, lineName);
        }
 
        String towerName = entity.getTowerName();
        if (towerName != null) {
            stmt.bindString(4, towerName);
        }
 
        String targetName = entity.getTargetName();
        if (targetName != null) {
            stmt.bindString(5, targetName);
        }
        stmt.bindDouble(6, entity.getSlantingAngle());
        stmt.bindDouble(7, entity.getFlyYaw());
        stmt.bindDouble(8, entity.getLatitude());
        stmt.bindDouble(9, entity.getLongitude());
        stmt.bindDouble(10, entity.getAltitude());
        stmt.bindDouble(11, entity.getHomeLatitude());
        stmt.bindDouble(12, entity.getHomeLongitude());
        stmt.bindDouble(13, entity.getType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FineStep entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSort());
 
        String lineName = entity.getLineName();
        if (lineName != null) {
            stmt.bindString(3, lineName);
        }
 
        String towerName = entity.getTowerName();
        if (towerName != null) {
            stmt.bindString(4, towerName);
        }
 
        String targetName = entity.getTargetName();
        if (targetName != null) {
            stmt.bindString(5, targetName);
        }
        stmt.bindDouble(6, entity.getSlantingAngle());
        stmt.bindDouble(7, entity.getFlyYaw());
        stmt.bindDouble(8, entity.getLatitude());
        stmt.bindDouble(9, entity.getLongitude());
        stmt.bindDouble(10, entity.getAltitude());
        stmt.bindDouble(11, entity.getHomeLatitude());
        stmt.bindDouble(12, entity.getHomeLongitude());
        stmt.bindDouble(13, entity.getType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FineStep readEntity(Cursor cursor, int offset) {
        FineStep entity = new FineStep( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // sort
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lineName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // towerName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // targetName
            cursor.getDouble(offset + 5), // slantingAngle
            cursor.getDouble(offset + 6), // flyYaw
            cursor.getDouble(offset + 7), // latitude
            cursor.getDouble(offset + 8), // longitude
            cursor.getDouble(offset + 9), // altitude
            cursor.getDouble(offset + 10), // homeLatitude
            cursor.getDouble(offset + 11), // homeLongitude
            cursor.getDouble(offset + 12) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FineStep entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSort(cursor.getInt(offset + 1));
        entity.setLineName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTowerName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTargetName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSlantingAngle(cursor.getDouble(offset + 5));
        entity.setFlyYaw(cursor.getDouble(offset + 6));
        entity.setLatitude(cursor.getDouble(offset + 7));
        entity.setLongitude(cursor.getDouble(offset + 8));
        entity.setAltitude(cursor.getDouble(offset + 9));
        entity.setHomeLatitude(cursor.getDouble(offset + 10));
        entity.setHomeLongitude(cursor.getDouble(offset + 11));
        entity.setType(cursor.getDouble(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FineStep entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FineStep entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FineStep entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
