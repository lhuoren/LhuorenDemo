package com.syy.moduledbbase.db.greedao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.syy.moduledbbase.db.entity.moduleuav.ImageInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IMAGE_INFO".
*/
public class ImageInfoDao extends AbstractDao<ImageInfo, Long> {

    public static final String TABLENAME = "IMAGE_INFO";

    /**
     * Properties of entity ImageInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AirLineTaskId = new Property(1, String.class, "airLineTaskId", false, "AIR_LINE_TASK_ID");
        public final static Property AirlineVersion = new Property(2, String.class, "airlineVersion", false, "AIRLINE_VERSION");
        public final static Property StartTime = new Property(3, java.util.Date.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(4, java.util.Date.class, "endTime", false, "END_TIME");
        public final static Property TakePhotoTime = new Property(5, long.class, "takePhotoTime", false, "TAKE_PHOTO_TIME");
        public final static Property IsUpload = new Property(6, String.class, "isUpload", false, "IS_UPLOAD");
        public final static Property ImageName = new Property(7, String.class, "imageName", false, "IMAGE_NAME");
        public final static Property FlyType = new Property(8, int.class, "flyType", false, "FLY_TYPE");
        public final static Property UpLoadImageState = new Property(9, String.class, "upLoadImageState", false, "UP_LOAD_IMAGE_STATE");
        public final static Property FileSize = new Property(10, long.class, "FileSize", false, "FILE_SIZE");
        public final static Property SavePhotoPath = new Property(11, String.class, "savePhotoPath", false, "SAVE_PHOTO_PATH");
        public final static Property PhotoNum = new Property(12, long.class, "photoNum", false, "PHOTO_NUM");
        public final static Property FlyRecordCreateTime = new Property(13, String.class, "flyRecordCreateTime", false, "FLY_RECORD_CREATE_TIME");
        public final static Property UploadType = new Property(14, String.class, "uploadType", false, "UPLOAD_TYPE");
    }


    public ImageInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ImageInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IMAGE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"AIR_LINE_TASK_ID\" TEXT," + // 1: airLineTaskId
                "\"AIRLINE_VERSION\" TEXT," + // 2: airlineVersion
                "\"START_TIME\" INTEGER," + // 3: startTime
                "\"END_TIME\" INTEGER," + // 4: endTime
                "\"TAKE_PHOTO_TIME\" INTEGER NOT NULL ," + // 5: takePhotoTime
                "\"IS_UPLOAD\" TEXT," + // 6: isUpload
                "\"IMAGE_NAME\" TEXT," + // 7: imageName
                "\"FLY_TYPE\" INTEGER NOT NULL ," + // 8: flyType
                "\"UP_LOAD_IMAGE_STATE\" TEXT," + // 9: upLoadImageState
                "\"FILE_SIZE\" INTEGER NOT NULL ," + // 10: FileSize
                "\"SAVE_PHOTO_PATH\" TEXT," + // 11: savePhotoPath
                "\"PHOTO_NUM\" INTEGER NOT NULL ," + // 12: photoNum
                "\"FLY_RECORD_CREATE_TIME\" TEXT," + // 13: flyRecordCreateTime
                "\"UPLOAD_TYPE\" TEXT);"); // 14: uploadType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IMAGE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ImageInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String airLineTaskId = entity.getAirLineTaskId();
        if (airLineTaskId != null) {
            stmt.bindString(2, airLineTaskId);
        }
 
        String airlineVersion = entity.getAirlineVersion();
        if (airlineVersion != null) {
            stmt.bindString(3, airlineVersion);
        }
 
        java.util.Date startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(4, startTime.getTime());
        }
 
        java.util.Date endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(5, endTime.getTime());
        }
        stmt.bindLong(6, entity.getTakePhotoTime());
 
        String isUpload = entity.getIsUpload();
        if (isUpload != null) {
            stmt.bindString(7, isUpload);
        }
 
        String imageName = entity.getImageName();
        if (imageName != null) {
            stmt.bindString(8, imageName);
        }
        stmt.bindLong(9, entity.getFlyType());
 
        String upLoadImageState = entity.getUpLoadImageState();
        if (upLoadImageState != null) {
            stmt.bindString(10, upLoadImageState);
        }
        stmt.bindLong(11, entity.getFileSize());
 
        String savePhotoPath = entity.getSavePhotoPath();
        if (savePhotoPath != null) {
            stmt.bindString(12, savePhotoPath);
        }
        stmt.bindLong(13, entity.getPhotoNum());
 
        String flyRecordCreateTime = entity.getFlyRecordCreateTime();
        if (flyRecordCreateTime != null) {
            stmt.bindString(14, flyRecordCreateTime);
        }
 
        String uploadType = entity.getUploadType();
        if (uploadType != null) {
            stmt.bindString(15, uploadType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ImageInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String airLineTaskId = entity.getAirLineTaskId();
        if (airLineTaskId != null) {
            stmt.bindString(2, airLineTaskId);
        }
 
        String airlineVersion = entity.getAirlineVersion();
        if (airlineVersion != null) {
            stmt.bindString(3, airlineVersion);
        }
 
        java.util.Date startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(4, startTime.getTime());
        }
 
        java.util.Date endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(5, endTime.getTime());
        }
        stmt.bindLong(6, entity.getTakePhotoTime());
 
        String isUpload = entity.getIsUpload();
        if (isUpload != null) {
            stmt.bindString(7, isUpload);
        }
 
        String imageName = entity.getImageName();
        if (imageName != null) {
            stmt.bindString(8, imageName);
        }
        stmt.bindLong(9, entity.getFlyType());
 
        String upLoadImageState = entity.getUpLoadImageState();
        if (upLoadImageState != null) {
            stmt.bindString(10, upLoadImageState);
        }
        stmt.bindLong(11, entity.getFileSize());
 
        String savePhotoPath = entity.getSavePhotoPath();
        if (savePhotoPath != null) {
            stmt.bindString(12, savePhotoPath);
        }
        stmt.bindLong(13, entity.getPhotoNum());
 
        String flyRecordCreateTime = entity.getFlyRecordCreateTime();
        if (flyRecordCreateTime != null) {
            stmt.bindString(14, flyRecordCreateTime);
        }
 
        String uploadType = entity.getUploadType();
        if (uploadType != null) {
            stmt.bindString(15, uploadType);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ImageInfo readEntity(Cursor cursor, int offset) {
        ImageInfo entity = new ImageInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // airLineTaskId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // airlineVersion
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // startTime
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // endTime
            cursor.getLong(offset + 5), // takePhotoTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // isUpload
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // imageName
            cursor.getInt(offset + 8), // flyType
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // upLoadImageState
            cursor.getLong(offset + 10), // FileSize
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // savePhotoPath
            cursor.getLong(offset + 12), // photoNum
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // flyRecordCreateTime
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // uploadType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ImageInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAirLineTaskId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAirlineVersion(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStartTime(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setEndTime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setTakePhotoTime(cursor.getLong(offset + 5));
        entity.setIsUpload(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setImageName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFlyType(cursor.getInt(offset + 8));
        entity.setUpLoadImageState(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFileSize(cursor.getLong(offset + 10));
        entity.setSavePhotoPath(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPhotoNum(cursor.getLong(offset + 12));
        entity.setFlyRecordCreateTime(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUploadType(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ImageInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ImageInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ImageInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
