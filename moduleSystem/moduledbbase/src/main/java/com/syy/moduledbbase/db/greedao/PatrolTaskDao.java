package com.syy.moduledbbase.db.greedao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.syy.moduledbbase.db.entity.modulecommon.TaskParams;

import com.syy.moduledbbase.db.entity.modulecommon.PatrolTask;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PATROL_TASK".
*/
public class PatrolTaskDao extends AbstractDao<PatrolTask, Long> {

    public static final String TABLENAME = "PATROL_TASK";

    /**
     * Properties of entity PatrolTask.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TaskName = new Property(1, String.class, "taskName", false, "TASK_NAME");
        public final static Property TaskStatus = new Property(2, int.class, "taskStatus", false, "TASK_STATUS");
        public final static Property SubTaskStatus = new Property(3, int.class, "subTaskStatus", false, "SUB_TASK_STATUS");
        public final static Property TaskType = new Property(4, int.class, "taskType", false, "TASK_TYPE");
        public final static Property ShapeType = new Property(5, int.class, "shapeType", false, "SHAPE_TYPE");
        public final static Property CreateDate = new Property(6, java.util.Date.class, "createDate", false, "CREATE_DATE");
        public final static Property StartDate = new Property(7, java.util.Date.class, "startDate", false, "START_DATE");
        public final static Property EndDate = new Property(8, java.util.Date.class, "endDate", false, "END_DATE");
        public final static Property FlyHeight = new Property(9, Double.class, "flyHeight", false, "FLY_HEIGHT");
        public final static Property Resolution = new Property(10, Double.class, "resolution", false, "RESOLUTION");
        public final static Property ScreenshotPath = new Property(11, String.class, "screenshotPath", false, "SCREENSHOT_PATH");
        public final static Property TaskParamsId = new Property(12, Long.class, "taskParamsId", false, "TASK_PARAMS_ID");
    }

    private DaoSession daoSession;


    public PatrolTaskDao(DaoConfig config) {
        super(config);
    }
    
    public PatrolTaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PATROL_TASK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TASK_NAME\" TEXT," + // 1: taskName
                "\"TASK_STATUS\" INTEGER NOT NULL ," + // 2: taskStatus
                "\"SUB_TASK_STATUS\" INTEGER NOT NULL ," + // 3: subTaskStatus
                "\"TASK_TYPE\" INTEGER NOT NULL ," + // 4: taskType
                "\"SHAPE_TYPE\" INTEGER NOT NULL ," + // 5: shapeType
                "\"CREATE_DATE\" INTEGER," + // 6: createDate
                "\"START_DATE\" INTEGER," + // 7: startDate
                "\"END_DATE\" INTEGER," + // 8: endDate
                "\"FLY_HEIGHT\" REAL," + // 9: flyHeight
                "\"RESOLUTION\" REAL," + // 10: resolution
                "\"SCREENSHOT_PATH\" TEXT," + // 11: screenshotPath
                "\"TASK_PARAMS_ID\" INTEGER);"); // 12: taskParamsId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PATROL_TASK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PatrolTask entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String taskName = entity.getTaskName();
        if (taskName != null) {
            stmt.bindString(2, taskName);
        }
        stmt.bindLong(3, entity.getTaskStatus());
        stmt.bindLong(4, entity.getSubTaskStatus());
        stmt.bindLong(5, entity.getTaskType());
        stmt.bindLong(6, entity.getShapeType());
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(7, createDate.getTime());
        }
 
        java.util.Date startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindLong(8, startDate.getTime());
        }
 
        java.util.Date endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindLong(9, endDate.getTime());
        }
 
        Double flyHeight = entity.getFlyHeight();
        if (flyHeight != null) {
            stmt.bindDouble(10, flyHeight);
        }
 
        Double resolution = entity.getResolution();
        if (resolution != null) {
            stmt.bindDouble(11, resolution);
        }
 
        String screenshotPath = entity.getScreenshotPath();
        if (screenshotPath != null) {
            stmt.bindString(12, screenshotPath);
        }
 
        Long taskParamsId = entity.getTaskParamsId();
        if (taskParamsId != null) {
            stmt.bindLong(13, taskParamsId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PatrolTask entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String taskName = entity.getTaskName();
        if (taskName != null) {
            stmt.bindString(2, taskName);
        }
        stmt.bindLong(3, entity.getTaskStatus());
        stmt.bindLong(4, entity.getSubTaskStatus());
        stmt.bindLong(5, entity.getTaskType());
        stmt.bindLong(6, entity.getShapeType());
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(7, createDate.getTime());
        }
 
        java.util.Date startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindLong(8, startDate.getTime());
        }
 
        java.util.Date endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindLong(9, endDate.getTime());
        }
 
        Double flyHeight = entity.getFlyHeight();
        if (flyHeight != null) {
            stmt.bindDouble(10, flyHeight);
        }
 
        Double resolution = entity.getResolution();
        if (resolution != null) {
            stmt.bindDouble(11, resolution);
        }
 
        String screenshotPath = entity.getScreenshotPath();
        if (screenshotPath != null) {
            stmt.bindString(12, screenshotPath);
        }
 
        Long taskParamsId = entity.getTaskParamsId();
        if (taskParamsId != null) {
            stmt.bindLong(13, taskParamsId);
        }
    }

    @Override
    protected final void attachEntity(PatrolTask entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PatrolTask readEntity(Cursor cursor, int offset) {
        PatrolTask entity = new PatrolTask( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // taskName
            cursor.getInt(offset + 2), // taskStatus
            cursor.getInt(offset + 3), // subTaskStatus
            cursor.getInt(offset + 4), // taskType
            cursor.getInt(offset + 5), // shapeType
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // createDate
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // startDate
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // endDate
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // flyHeight
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // resolution
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // screenshotPath
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12) // taskParamsId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PatrolTask entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTaskName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTaskStatus(cursor.getInt(offset + 2));
        entity.setSubTaskStatus(cursor.getInt(offset + 3));
        entity.setTaskType(cursor.getInt(offset + 4));
        entity.setShapeType(cursor.getInt(offset + 5));
        entity.setCreateDate(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setStartDate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setEndDate(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setFlyHeight(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setResolution(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setScreenshotPath(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTaskParamsId(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PatrolTask entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PatrolTask entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PatrolTask entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTaskParamsDao().getAllColumns());
            builder.append(" FROM PATROL_TASK T");
            builder.append(" LEFT JOIN TASK_PARAMS T0 ON T.\"TASK_PARAMS_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected PatrolTask loadCurrentDeep(Cursor cursor, boolean lock) {
        PatrolTask entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        TaskParams taskParams = loadCurrentOther(daoSession.getTaskParamsDao(), cursor, offset);
        entity.setTaskParams(taskParams);

        return entity;    
    }

    public PatrolTask loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<PatrolTask> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<PatrolTask> list = new ArrayList<PatrolTask>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<PatrolTask> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<PatrolTask> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
