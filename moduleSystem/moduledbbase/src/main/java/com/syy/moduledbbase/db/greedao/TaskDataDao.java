package com.syy.moduledbbase.db.greedao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.syy.moduledbbase.db.entity.modulecommon.TaskData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK_DATA".
*/
public class TaskDataDao extends AbstractDao<TaskData, Long> {

    public static final String TABLENAME = "TASK_DATA";

    /**
     * Properties of entity TaskData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RecordId = new Property(1, Long.class, "recordId", false, "RECORD_ID");
        public final static Property FlyTaskWorkId = new Property(2, String.class, "flyTaskWorkId", false, "FLY_TASK_WORK_ID");
        public final static Property FlyTaskWorkCruiseId = new Property(3, String.class, "flyTaskWorkCruiseId", false, "FLY_TASK_WORK_CRUISE_ID");
        public final static Property FlyTaskWorkCruiseName = new Property(4, String.class, "flyTaskWorkCruiseName", false, "FLY_TASK_WORK_CRUISE_NAME");
        public final static Property SlantingType = new Property(5, int.class, "slantingType", false, "SLANTING_TYPE");
        public final static Property CreateDate = new Property(6, java.util.Date.class, "createDate", false, "CREATE_DATE");
        public final static Property Idx = new Property(7, int.class, "idx", false, "IDX");
        public final static Property Path = new Property(8, String.class, "path", false, "PATH");
        public final static Property BigPhotoPath = new Property(9, String.class, "bigPhotoPath", false, "BIG_PHOTO_PATH");
        public final static Property DataType = new Property(10, String.class, "dataType", false, "DATA_TYPE");
        public final static Property TargetId = new Property(11, String.class, "targetId", false, "TARGET_ID");
        public final static Property Remark = new Property(12, String.class, "remark", false, "REMARK");
        public final static Property TowerName = new Property(13, String.class, "towerName", false, "TOWER_NAME");
        public final static Property TowerLatitude = new Property(14, Double.class, "towerLatitude", false, "TOWER_LATITUDE");
        public final static Property TowerLongitude = new Property(15, Double.class, "towerLongitude", false, "TOWER_LONGITUDE");
        public final static Property SignPhotoDefect = new Property(16, String.class, "signPhotoDefect", false, "SIGN_PHOTO_DEFECT");
    }

    private Query<TaskData> flyRecord_TaskDataListQuery;

    public TaskDataDao(DaoConfig config) {
        super(config);
    }
    
    public TaskDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"RECORD_ID\" INTEGER," + // 1: recordId
                "\"FLY_TASK_WORK_ID\" TEXT," + // 2: flyTaskWorkId
                "\"FLY_TASK_WORK_CRUISE_ID\" TEXT," + // 3: flyTaskWorkCruiseId
                "\"FLY_TASK_WORK_CRUISE_NAME\" TEXT," + // 4: flyTaskWorkCruiseName
                "\"SLANTING_TYPE\" INTEGER NOT NULL ," + // 5: slantingType
                "\"CREATE_DATE\" INTEGER," + // 6: createDate
                "\"IDX\" INTEGER NOT NULL ," + // 7: idx
                "\"PATH\" TEXT," + // 8: path
                "\"BIG_PHOTO_PATH\" TEXT," + // 9: bigPhotoPath
                "\"DATA_TYPE\" TEXT," + // 10: dataType
                "\"TARGET_ID\" TEXT," + // 11: targetId
                "\"REMARK\" TEXT," + // 12: remark
                "\"TOWER_NAME\" TEXT," + // 13: towerName
                "\"TOWER_LATITUDE\" REAL," + // 14: towerLatitude
                "\"TOWER_LONGITUDE\" REAL," + // 15: towerLongitude
                "\"SIGN_PHOTO_DEFECT\" TEXT);"); // 16: signPhotoDefect
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TaskData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long recordId = entity.getRecordId();
        if (recordId != null) {
            stmt.bindLong(2, recordId);
        }
 
        String flyTaskWorkId = entity.getFlyTaskWorkId();
        if (flyTaskWorkId != null) {
            stmt.bindString(3, flyTaskWorkId);
        }
 
        String flyTaskWorkCruiseId = entity.getFlyTaskWorkCruiseId();
        if (flyTaskWorkCruiseId != null) {
            stmt.bindString(4, flyTaskWorkCruiseId);
        }
 
        String flyTaskWorkCruiseName = entity.getFlyTaskWorkCruiseName();
        if (flyTaskWorkCruiseName != null) {
            stmt.bindString(5, flyTaskWorkCruiseName);
        }
        stmt.bindLong(6, entity.getSlantingType());
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(7, createDate.getTime());
        }
        stmt.bindLong(8, entity.getIdx());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(9, path);
        }
 
        String bigPhotoPath = entity.getBigPhotoPath();
        if (bigPhotoPath != null) {
            stmt.bindString(10, bigPhotoPath);
        }
 
        String dataType = entity.getDataType();
        if (dataType != null) {
            stmt.bindString(11, dataType);
        }
 
        String targetId = entity.getTargetId();
        if (targetId != null) {
            stmt.bindString(12, targetId);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(13, remark);
        }
 
        String towerName = entity.getTowerName();
        if (towerName != null) {
            stmt.bindString(14, towerName);
        }
 
        Double towerLatitude = entity.getTowerLatitude();
        if (towerLatitude != null) {
            stmt.bindDouble(15, towerLatitude);
        }
 
        Double towerLongitude = entity.getTowerLongitude();
        if (towerLongitude != null) {
            stmt.bindDouble(16, towerLongitude);
        }
 
        String signPhotoDefect = entity.getSignPhotoDefect();
        if (signPhotoDefect != null) {
            stmt.bindString(17, signPhotoDefect);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TaskData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long recordId = entity.getRecordId();
        if (recordId != null) {
            stmt.bindLong(2, recordId);
        }
 
        String flyTaskWorkId = entity.getFlyTaskWorkId();
        if (flyTaskWorkId != null) {
            stmt.bindString(3, flyTaskWorkId);
        }
 
        String flyTaskWorkCruiseId = entity.getFlyTaskWorkCruiseId();
        if (flyTaskWorkCruiseId != null) {
            stmt.bindString(4, flyTaskWorkCruiseId);
        }
 
        String flyTaskWorkCruiseName = entity.getFlyTaskWorkCruiseName();
        if (flyTaskWorkCruiseName != null) {
            stmt.bindString(5, flyTaskWorkCruiseName);
        }
        stmt.bindLong(6, entity.getSlantingType());
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(7, createDate.getTime());
        }
        stmt.bindLong(8, entity.getIdx());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(9, path);
        }
 
        String bigPhotoPath = entity.getBigPhotoPath();
        if (bigPhotoPath != null) {
            stmt.bindString(10, bigPhotoPath);
        }
 
        String dataType = entity.getDataType();
        if (dataType != null) {
            stmt.bindString(11, dataType);
        }
 
        String targetId = entity.getTargetId();
        if (targetId != null) {
            stmt.bindString(12, targetId);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(13, remark);
        }
 
        String towerName = entity.getTowerName();
        if (towerName != null) {
            stmt.bindString(14, towerName);
        }
 
        Double towerLatitude = entity.getTowerLatitude();
        if (towerLatitude != null) {
            stmt.bindDouble(15, towerLatitude);
        }
 
        Double towerLongitude = entity.getTowerLongitude();
        if (towerLongitude != null) {
            stmt.bindDouble(16, towerLongitude);
        }
 
        String signPhotoDefect = entity.getSignPhotoDefect();
        if (signPhotoDefect != null) {
            stmt.bindString(17, signPhotoDefect);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TaskData readEntity(Cursor cursor, int offset) {
        TaskData entity = new TaskData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // recordId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // flyTaskWorkId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // flyTaskWorkCruiseId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // flyTaskWorkCruiseName
            cursor.getInt(offset + 5), // slantingType
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // createDate
            cursor.getInt(offset + 7), // idx
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // path
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // bigPhotoPath
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // dataType
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // targetId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // remark
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // towerName
            cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14), // towerLatitude
            cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15), // towerLongitude
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // signPhotoDefect
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TaskData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRecordId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setFlyTaskWorkId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFlyTaskWorkCruiseId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFlyTaskWorkCruiseName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSlantingType(cursor.getInt(offset + 5));
        entity.setCreateDate(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setIdx(cursor.getInt(offset + 7));
        entity.setPath(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBigPhotoPath(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDataType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTargetId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRemark(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTowerName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setTowerLatitude(cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14));
        entity.setTowerLongitude(cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15));
        entity.setSignPhotoDefect(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TaskData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TaskData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TaskData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "taskDataList" to-many relationship of FlyRecord. */
    public List<TaskData> _queryFlyRecord_TaskDataList(Long recordId) {
        synchronized (this) {
            if (flyRecord_TaskDataListQuery == null) {
                QueryBuilder<TaskData> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.RecordId.eq(null));
                flyRecord_TaskDataListQuery = queryBuilder.build();
            }
        }
        Query<TaskData> query = flyRecord_TaskDataListQuery.forCurrentThread();
        query.setParameter(0, recordId);
        return query.list();
    }

}
