package com.syy.moduledbbase.db.greedao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.syy.moduledbbase.db.entity.modulecommon.TaskMarker;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK_MARKER".
*/
public class TaskMarkerDao extends AbstractDao<TaskMarker, Long> {

    public static final String TABLENAME = "TASK_MARKER";

    /**
     * Properties of entity TaskMarker.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TaskId = new Property(1, Long.class, "taskId", false, "TASK_ID");
        public final static Property MarkerType = new Property(2, int.class, "markerType", false, "MARKER_TYPE");
        public final static Property Latitude = new Property(3, double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(4, double.class, "longitude", false, "LONGITUDE");
        public final static Property FlightHeight = new Property(5, double.class, "flightHeight", false, "FLIGHT_HEIGHT");
    }

    private Query<TaskMarker> patrolTask_TaskMarkersQuery;

    public TaskMarkerDao(DaoConfig config) {
        super(config);
    }
    
    public TaskMarkerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK_MARKER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TASK_ID\" INTEGER," + // 1: taskId
                "\"MARKER_TYPE\" INTEGER NOT NULL ," + // 2: markerType
                "\"LATITUDE\" REAL NOT NULL ," + // 3: latitude
                "\"LONGITUDE\" REAL NOT NULL ," + // 4: longitude
                "\"FLIGHT_HEIGHT\" REAL NOT NULL );"); // 5: flightHeight
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK_MARKER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TaskMarker entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindLong(2, taskId);
        }
        stmt.bindLong(3, entity.getMarkerType());
        stmt.bindDouble(4, entity.getLatitude());
        stmt.bindDouble(5, entity.getLongitude());
        stmt.bindDouble(6, entity.getFlightHeight());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TaskMarker entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindLong(2, taskId);
        }
        stmt.bindLong(3, entity.getMarkerType());
        stmt.bindDouble(4, entity.getLatitude());
        stmt.bindDouble(5, entity.getLongitude());
        stmt.bindDouble(6, entity.getFlightHeight());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TaskMarker readEntity(Cursor cursor, int offset) {
        TaskMarker entity = new TaskMarker( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // taskId
            cursor.getInt(offset + 2), // markerType
            cursor.getDouble(offset + 3), // latitude
            cursor.getDouble(offset + 4), // longitude
            cursor.getDouble(offset + 5) // flightHeight
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TaskMarker entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTaskId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setMarkerType(cursor.getInt(offset + 2));
        entity.setLatitude(cursor.getDouble(offset + 3));
        entity.setLongitude(cursor.getDouble(offset + 4));
        entity.setFlightHeight(cursor.getDouble(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TaskMarker entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TaskMarker entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TaskMarker entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "taskMarkers" to-many relationship of PatrolTask. */
    public List<TaskMarker> _queryPatrolTask_TaskMarkers(Long taskId) {
        synchronized (this) {
            if (patrolTask_TaskMarkersQuery == null) {
                QueryBuilder<TaskMarker> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TaskId.eq(null));
                patrolTask_TaskMarkersQuery = queryBuilder.build();
            }
        }
        Query<TaskMarker> query = patrolTask_TaskMarkersQuery.forCurrentThread();
        query.setParameter(0, taskId);
        return query.list();
    }

}
